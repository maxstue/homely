# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: AppQueries
    mutation: AppMutations
}

type Address {
    city: String!
    country: String!
    state: String!
    street: String!
    zipCode: String!
}

type AppConfig {
    address: Address
    applicationName: String
    baseFolderName: String
    configFileName: String
    configFilePath: String!
    configFolderName: String
    configFolderPath: String
    configName: String
    deleteXAmountAfterLimit: Int
    description: String
    downloadServerUrl: String
    firstStartUp: Boolean!
    isActive: Boolean!
    logFilePath: String!
    logFolderName: String
    logFolderPath: String
    pluginFolderName: String
    pluginFolderPath: String
    saveXLimit: Int
    timeZone: String
    unitSystem: String
}

"Main entrypoint for all mutations."
type AppMutations {
    createDevice(input: CreateDeviceInput!): DevicePayload!
    createGroup(input: CreateGroupInput!): GroupPayload!
    initializeApp(input: AppConfigInitInput!): InitPayload!
    login(input: LoginInput!): IdentityPayload!
    refreshTokens: IdentityPayload!
    registration(input: RegistrationInput!): IdentityPayload!
    updateDevice(input: UpdateDeviceInput!): DevicePayload!
    updateGroup(input: UpdateGroupInput!): GroupPayload!
    updateUser(input: UpdateUserInput!): UserPayload!
}

"Main entrypoint for all queries."
type AppQueries {
    appConfig: AppConfig!
    applicationIsActive: Boolean!
    devices(order: [DeviceSortInput!], where: DeviceFilterInput): [Device!]!
    devicesCount: Int!
    getMe: IdentityPayload!
    groups(order: [GroupSortInput!], where: GroupFilterInput): [Group!]!
    groupsCount: Int!
    logout: IdentityPayload!
    scanNetworkDevices(order: [NetworkDeviceSortInput!], where: NetworkDeviceFilterInput): [NetworkDevice!]!
    setLightState(input: DeviceLightStateInput!): DeviceStatePayload!
    usersExist: Boolean!
}

type BaseEntity {
    createdAt: DateTime!
    createdBy: String!
    description: String
    id: String!
    lastModifiedAt: DateTime!
    lastModifiedBy: String!
    name: String!
    setDescription(description: String!): BaseEntity!
    setName(name: String!): BaseEntity!
}

type Company {
    name: String!
    shortName: String!
}

type Device {
    company: Company!
    createdAt: DateTime!
    createdBy: String!
    description: String
    groups: [Group!]!
    id: String!
    ip: IpAddress!
    lastModifiedAt: DateTime!
    lastModifiedBy: String!
    name: String!
    pluginName: String!
    pluginTypes: PluginTypes!
    primaryConnection: ConnectionTypes!
    secondaryConnection: ConnectionTypes!
    setDescription(description: String!): BaseEntity!
    setName(name: String!): BaseEntity!
    status: StatusResponseType
}

type DevicePayload {
    device: Device
    errors: [UserError!]
    message: String
}

type DeviceStatePayload {
    errors: [UserError!]
    lightResponseType: LightResponseType
    message: String
}

type Group {
    createdAt: DateTime!
    createdBy: String!
    description: String
    devices: [Device!]!
    id: String!
    lastModifiedAt: DateTime!
    lastModifiedBy: String!
    name: String!
    setDescription(description: String!): BaseEntity!
    setName(name: String!): BaseEntity!
}

type GroupPayload {
    errors: [UserError!]
    group: Group
    message: String
}

type IdentityPayload {
    errors: [UserError!]
    isAuthenticated: Boolean!
    message: String
    user: User
}

type InitPayload {
    appConfig: AppConfig
    errors: [UserError!]
    message: String
}

type IpAddress {
    ipv4: String!
}

type LightResponseType {
    blue: Int!
    green: Int!
    ison: Boolean!
    mode: String!
    red: Int!
    white: Int!
}

type NetworkDevice {
    description: String
    hostname: String
    ipv4: String
    ipv6: String
    macAddress: String
    name: String
}

type PersonName {
    firstName: String!
    lastName: String!
    middleName: String!
}

type StatusResponseType {
    lights: [LightResponseType!]!
}

type User {
    accessFailedCount: Int!
    concurrencyStamp: String
    createdAt: DateTime!
    createdBy: String!
    email: String
    emailConfirmed: Boolean!
    id: String
    isFirstLogin: Boolean!
    lastModifiedAt: DateTime!
    lastModifiedBy: String!
    lockoutEnabled: Boolean!
    lockoutEnd: DateTime
    normalizedEmail: String
    normalizedUserName: String
    passwordHash: String
    personInfo: String!
    personName: PersonName!
    phoneNumber: String
    phoneNumberConfirmed: Boolean!
    roles: [String!]!
    securityStamp: String
    twoFactorEnabled: Boolean!
    userName: String
}

type UserError {
    code: AppErrorCodes!
    message: String!
}

type UserPayload {
    errors: [UserError!]
    message: String
    user: User!
}

enum AppErrorCodes {
    EXISTS
    IS_EMPTY
    IS_SUB_GROUP
    NOT_AUTHORIZED
    NOT_CREATED
    NOT_FOUND
    NOT_SET
    NOT_UPDATED
    NO_HOME
    SERVER_ERROR
}

enum ApplyPolicy {
    AFTER_RESOLVER
    BEFORE_RESOLVER
}

enum ConnectionTypes {
    HTTP
    MQTT
    NONE
}

enum PluginTypes {
    BASE
    DOOR
    HT
    LIGHT
    MOCK
    NONE
    RGB
    SENSOR
}

enum SortEnumType {
    ASC
    DESC
}

input AppConfigInitInput {
    autoDetectAddress: Boolean!
    description: String
    name: String
}

input CompanyFilterInput {
    and: [CompanyFilterInput!]
    name: StringOperationFilterInput
    or: [CompanyFilterInput!]
    shortName: StringOperationFilterInput
}

input CompanySortInput {
    name: SortEnumType
    shortName: SortEnumType
}

input ComparableDateTimeOffsetOperationFilterInput {
    eq: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime!]
    lt: DateTime
    lte: DateTime
    neq: DateTime
    ngt: DateTime
    ngte: DateTime
    nin: [DateTime!]
    nlt: DateTime
    nlte: DateTime
}

input ConnectionTypesOperationFilterInput {
    eq: ConnectionTypes
    in: [ConnectionTypes!]
    neq: ConnectionTypes
    nin: [ConnectionTypes!]
}

input CreateDeviceInput {
    companyName: String!
    description: String
    groupName: String
    ipv4: String!
    name: String!
    pluginName: String!
    pluginTypes: PluginTypes!
    primaryConnection: ConnectionTypes!
    secondaryConnection: ConnectionTypes!
}

input CreateGroupInput {
    description: String
    name: String!
}

input DeviceFilterInput {
    and: [DeviceFilterInput!]
    company: CompanyFilterInput
    createdAt: ComparableDateTimeOffsetOperationFilterInput
    createdBy: StringOperationFilterInput
    description: StringOperationFilterInput
    groups: ListFilterInputTypeOfGroupFilterInput
    id: StringOperationFilterInput
    ip: IpAddressFilterInput
    lastModifiedAt: ComparableDateTimeOffsetOperationFilterInput
    lastModifiedBy: StringOperationFilterInput
    name: StringOperationFilterInput
    or: [DeviceFilterInput!]
    pluginName: StringOperationFilterInput
    pluginTypes: PluginTypesOperationFilterInput
    primaryConnection: ConnectionTypesOperationFilterInput
    secondaryConnection: ConnectionTypesOperationFilterInput
}

input DeviceLightStateInput {
    deviceId: String!
    setLight: Boolean!
}

input DeviceSortInput {
    company: CompanySortInput
    createdAt: SortEnumType
    createdBy: SortEnumType
    description: SortEnumType
    id: SortEnumType
    ip: IpAddressSortInput
    lastModifiedAt: SortEnumType
    lastModifiedBy: SortEnumType
    name: SortEnumType
    pluginName: SortEnumType
    pluginTypes: SortEnumType
    primaryConnection: SortEnumType
    secondaryConnection: SortEnumType
}

input GroupFilterInput {
    and: [GroupFilterInput!]
    createdAt: ComparableDateTimeOffsetOperationFilterInput
    createdBy: StringOperationFilterInput
    description: StringOperationFilterInput
    devices: ListFilterInputTypeOfDeviceFilterInput
    id: StringOperationFilterInput
    lastModifiedAt: ComparableDateTimeOffsetOperationFilterInput
    lastModifiedBy: StringOperationFilterInput
    name: StringOperationFilterInput
    or: [GroupFilterInput!]
}

input GroupSortInput {
    createdAt: SortEnumType
    createdBy: SortEnumType
    description: SortEnumType
    id: SortEnumType
    lastModifiedAt: SortEnumType
    lastModifiedBy: SortEnumType
    name: SortEnumType
}

input IpAddressFilterInput {
    and: [IpAddressFilterInput!]
    ipv4: StringOperationFilterInput
    or: [IpAddressFilterInput!]
}

input IpAddressSortInput {
    ipv4: SortEnumType
}

input ListFilterInputTypeOfDeviceFilterInput {
    all: DeviceFilterInput
    any: Boolean
    none: DeviceFilterInput
    some: DeviceFilterInput
}

input ListFilterInputTypeOfGroupFilterInput {
    all: GroupFilterInput
    any: Boolean
    none: GroupFilterInput
    some: GroupFilterInput
}

input LoginInput {
    password: String!
    userName: String!
}

input NetworkDeviceFilterInput {
    and: [NetworkDeviceFilterInput!]
    description: StringOperationFilterInput
    hostname: StringOperationFilterInput
    ipv4: StringOperationFilterInput
    ipv6: StringOperationFilterInput
    macAddress: StringOperationFilterInput
    name: StringOperationFilterInput
    or: [NetworkDeviceFilterInput!]
}

input NetworkDeviceSortInput {
    description: SortEnumType
    hostname: SortEnumType
    ipv4: SortEnumType
    ipv6: SortEnumType
    macAddress: SortEnumType
    name: SortEnumType
}

input PluginTypesOperationFilterInput {
    eq: PluginTypes
    in: [PluginTypes!]
    neq: PluginTypes
    nin: [PluginTypes!]
}

input RegistrationInput {
    password: String!
    role: String!
    userName: String!
}

input StringOperationFilterInput {
    and: [StringOperationFilterInput!]
    contains: String
    endsWith: String
    eq: String
    in: [String]
    ncontains: String
    nendsWith: String
    neq: String
    nin: [String]
    nstartsWith: String
    or: [StringOperationFilterInput!]
    startsWith: String
}

input UpdateDeviceInput {
    description: String
    groupName: String
    id: String!
    ipv4: String
    name: String
    primaryConnection: ConnectionTypes
    secondaryConnection: ConnectionTypes
}

input UpdateGroupInput {
    description: String
    id: String!
    name: String
}

input UpdateUserInput {
    email: String
    firstName: String
    lastName: String
    middleName: String
    newRole: String
    personInfo: String
    phoneNumber: String
    userId: String!
    userName: String
}


"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime